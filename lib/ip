# SPDX-License-Identifier: LGPL-2.1-or-later
# Copyright © 2008-2018 ANSSI. All Rights Reserved.
# Copyright 2007-2009 SGDN/DCSSI
# Copyright 2010-2013 SGDSN/ANSSI
# Author: Vincent Strubel <clipos@ssi.gouv.fr>
# Distributed under the terms of the GNU Lesser General Public License v2.1

NET_MODULE_IP="yes"

ip_startif_extra() {
	return 0
}

ip_route_extra() {
	return 0
}

ROUTE_IMPORT_FILTER="${_IMPORT_FILTER_ADDR}/${_IMPORT_FILTER_MASK}:${_IMPORT_FILTER_ADDR}"
ROUTE_MULTI_FILTER="${ROUTE_IMPORT_FILTER}( ${ROUTE_IMPORT_FILTER})*"

ip_get_conf() {
	local mtus=""
	for i in $(seq 0 ${IF_NUMBER}); do
		mtus="${mtus} ETH${i}_MTU"
	done

	import_conf_noerr "${NET_FILE}" "[1-9][0-9]{2,3}" ${mtus} 2>/dev/null 1>/dev/null

	import_conf_noerr "${NET_FILE}" "${ROUTE_MULTI_FILTER}" "ROUTE_EXTRA" 2>/dev/null 1>/dev/null

	# No error if we fail to import MTUs or extra routes
	return 0
}

ip_do_extra_routes() {
	local dest gw r
	for r in ${ROUTE_EXTRA}; do
		dest="${r%%:*}"
		gw="${r##*:}"
		if [[ -z "${dest}" || -z "${gw}" ]]; then
			net_warn "invalid extra route: ${r}"
			continue
		fi
		einfo "Adding extra route to ${dest} via ${gw}"
		if ! net_route_gtw "${gw}" "${dest}"; then
			ewarn "Failed to add extra route : ${dest} via ${gw}"
			errormsg_add "l'application de la règle de routage supplémentaire pour ${dest} a échoué"
			return 1
		fi
	done
}

ip_check_dupip() {
	local eth="${1}"
	local addr="${2}"
	net_ifup "${eth}"
	checkip.sh "${eth}" "${addr}" "dupip" &
	# Do not error out here, simply log the error
	return 0
}

ip_check_default_route() {
	local eth="$1"
	local addr="${DEFAULT_ROUTE}"

	[[ -f "/var/run/route_umts" ]] && addr="$(<"/var/run/route_umts")"
	[[ -f "/var/run/route_dhcp" ]] && addr="$(<"/var/run/route_dhcp")"

	[[ -n "${addr}" ]] || return 0

	checkip.sh "${eth}" "${addr}" "route" &
	# Do not error out here, simply log the error
	return 0
}

ip_reset() {
	ewarn "Could not start all ethernet interfaces, resetting config to local"
	errormsg_add "la configuration des interfaces a échoué (mise en place de la configuration locale)"
	local i
	for i in $(seq 0 ${IF_NUMBER}); do
		[[ -e "/sys/class/net/eth${i}" ]]  && net_stopif "eth${i}"
	done
	write_lock "type: none\nlevel: 0\nEchec de configuration"
}

ip_do_start() {
	eindent
	
	local i var

	for i in $(seq 0 ${IF_NUMBER}); do
		[[ -f "/var/run/eth${i}_dhcp" ]] && continue
		[[ -f "/var/run/eth${i}_umts" ]] && continue
		[[ -e "/sys/class/net/eth${i}" ]] || continue
		
		var="ETH${i}_ADDR"
		local addr="${!var}"
		var="ETH${i}_MASK"
		local mask="${!var}"

		if ! net_startif "eth${i}" "${addr}/${mask}"; then
			ewarn "Failed to set up address ${addr}/${mask} on eth${i}"
			errormsg_add "erreur dans l'attribution de l'adresse ${addr}/${mask} à eth${i}"
			return 1
		fi

		ip_check_dupip "eth${i}" "${addr}"
	done
	
	ip_check_default_route "eth0" 

	if [[ ! -f "/var/run/umts_if" && ! -f "/var/run/wlan_if" ]]; then
		# eth0 is wired, write its status to NET_STATUS
		local addrmask=""
		if [[ -f "/var/run/eth0_dhcp" ]]; then
			addrmask="$(<"/var/run/eth0_dhcp")"
		else
			[[ -n "${ETH0_ADDR}" ]] && addrmask="${ETH0_ADDR}/${ETH0_MASK}"
		fi
		[[ -n "${addrmask}" ]] && \
			gw=$(/sbin/ip -4 route|grep default|awk '{print $3}')
			write_lock "type: wired\nlevel: 1\naddr: ${addrmask}\ngw: ${gw}"
	fi
			
	# Set MTU even on DHCP interfaces
	for i in $(seq 0 ${IF_NUMBER}); do
		var="ETH${i}_MTU"
		local mtu="${!var}"
		if [[ -n "${mtu}" && ${mtu} -le 1500 ]]; then
			if ! net_set_mtu "eth${i}" "${mtu}"; then
				ewarn "Failed to set MTU ${mtu} on eth${i}"
				errormsg_add "impossible d'attribuer la MTU ${mtu} à l'interface eth${i}"
				return 1
			fi
		fi
	done

	ip_startif_extra || return 1

	eoutdent

	if [[ -n "${ROUTE_EXTRA}" ]]; then
		ip_do_extra_routes || return 1
	fi
		
	if [[ ! -f "/var/run/route_dhcp" && ! -f "/var/run/route_umts" ]]; then
		net_route_default "${DEFAULT_ROUTE}" || {
			ewarn "Failed to set up default route ${DEFAULT_ROUTE}"
			errormsg_add "l'application de la règle de routage principale (${DEFAULT_ROUTE}) a échoué"
			return 1
		}
	fi

	ip_route_extra || return 1
}

ip_start() {
	if ! ip_get_conf; then
		ip_reset
		return 1
	fi

	if ! ip_do_start; then 
		ip_reset
		return 1
	fi
}

ip_stop() {
	local i
	if [[ -n "${ADMIN_IF}" ]]; then
		for i in $(seq 0 ${IF_NUMBER}); do
			# When we have a dedicated admin interface, we never bring it down.
			# This is a FOO-specific kludge - we might need
			# to do something more clever about it one day...
			# It should not break anything since net_startif only outputs a warning 
			# when it finds the interface is already up.
			[[ -e "/sys/class/net/eth${i}" ]]  || continue
			if [[ "${i}" == "${ADMIN_IF}" ]]; then
				# We still need to flush the addresses, 
				# or else net_startif will complain vigorously...
				ip addr flush dev "eth${i}"
			else
				net_stopif "eth${i}"
			fi
		done
	else
		for i in $(seq 0 ${IF_NUMBER}); do
			[[ -e "/sys/class/net/eth${i}" ]] && net_stopif "eth${i}"
		done
	fi
	net_route_deldefault 2>/dev/null 
	write_lock "type: none\nlevel: 0\nArrêt du réseau"
}
